const mongoose = require('mongoose');

const laundryTaskSchema = new mongoose.Schema({
  apartment: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Apartment',
    required: true,
  },
  scheduledAt: {
    type: Date,
    required: true,
  },
  items: [{
    label: {
      type: String,
      required: true,
      trim: true,
    },
    qty: {
      type: Number,
      required: true,
      min: 1,
      default: 1,
    },
  }],
  assignedTo: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  status: {
    type: String,
    enum: ['À préparer', 'Préparé', 'Problème'],
    default: 'À préparer',
  },
  autoGenerated: {
    type: Boolean,
    default: false,
  },
  notes: {
    type: String,
    trim: true,
  },
  completedAt: {
    type: Date,
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
});

// Enhanced indexes for better duplicate prevention and performance
laundryTaskSchema.index({ 
  apartment: 1, 
  scheduledAt: 1, 
  autoGenerated: 1 
}, { 
  unique: true,
  name: 'unique_auto_laundry_per_apartment_time',
  background: true
});

// Additional performance indexes
laundryTaskSchema.index({
  assignedTo: 1,
  status: 1,
  scheduledAt: 1
}, {
  name: 'assignedTo_status_scheduled',
  background: true
});

laundryTaskSchema.index({
  apartment: 1,
  status: 1,
  autoGenerated: 1
}, {
  name: 'apartment_status_auto',
  background: true
});

laundryTaskSchema.pre('save', function (next) {
  this.updatedAt = Date.now();
  if (this.status === 'Préparé' && !this.completedAt) {
    this.completedAt = new Date();
  }
  next();
});

// Hook pour vérifier les permissions des Managers
laundryTaskSchema.pre('save', async function (next) {
  // Seulement pour les nouvelles tâches ou si l'appartement change
  if (this.isNew || this.isModified('apartment')) {
    try {
      // Récupérer l'utilisateur qui crée/modifie la tâche
      const User = require('./User');
      const creator = await User.findById(this.createdBy);
      
      if (creator && creator.role === 'Manager') {
        // Vérifier que l'appartement est dans la liste des appartements gérés
        const managedApartmentIds = creator.managedApartments?.map(id => id.toString()) || [];
        
        if (!managedApartmentIds.includes(this.apartment.toString())) {
          const error = new Error('Accès refusé : cet appartement n\'est pas dans votre périmètre de gestion');
          error.name = 'ValidationError';
          return next(error);
        }
      }
    } catch (error) {
      return next(error);
    }
  }
  next();
});

module.exports = mongoose.model('LaundryTask', laundryTaskSchema);