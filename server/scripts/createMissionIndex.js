// Script pour cr√©er l'index unique sur les missions automatiques
require('dotenv').config();
const mongoose = require('mongoose');

async function createMissionIndex() {
  try {
    await mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    console.log('üîß Cr√©ation de l\'index unique pour les missions automatiques...');

    const db = mongoose.connection.db;
    const collection = db.collection('missions');

    // Supprimer l'index s'il existe d√©j√† (pour recr√©ation)
    try {
      await collection.dropIndex('unique_auto_mission_per_apartment_day');
      console.log('  ‚Ü≥ Index existant supprim√©');
    } catch (error) {
      // Index n'existe pas, c'est normal
    }

    // Cr√©er le nouvel index unique
    await collection.createIndex(
      { 
        apartment: 1, 
        dateDebut: 1,
        'metadata.autoGenerated': 1
      }, 
      { 
        unique: true,
        partialFilterExpression: { 'metadata.autoGenerated': true },
        name: 'unique_auto_mission_per_apartment_day'
      }
    );

    console.log('‚úÖ Index unique cr√©√© avec succ√®s');
    console.log('  ‚Ü≥ Nom: unique_auto_mission_per_apartment_day');
    console.log('  ‚Ü≥ Champs: { apartment: 1, dateDebut: 1, "metadata.autoGenerated": 1 }');
    console.log('  ‚Ü≥ Filtre: metadata.autoGenerated = true');

    // V√©rifier que l'index a √©t√© cr√©√©
    const indexes = await collection.listIndexes().toArray();
    const ourIndex = indexes.find(idx => idx.name === 'unique_auto_mission_per_apartment_day');
    
    if (ourIndex) {
      console.log('‚úÖ Index v√©rifi√© et actif');
    } else {
      console.log('‚ùå Erreur: Index non trouv√© apr√®s cr√©ation');
    }

    await mongoose.disconnect();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de l\'index:', error);
    process.exit(1);
  }
}

createMissionIndex();