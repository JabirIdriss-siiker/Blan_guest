// scripts/testDoubleMissions.js
require('dotenv').config();
const mongoose = require('mongoose');
const Booking = require('../models/Booking');
const Mission = require('../models/Mission');
const { processUpcomingBookings } = require('../services/missionAutomationService');

async function main() {
  // 1) connect
  await mongoose.connect(process.env.MONGODB_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  });
  console.log('✅ Connected to MongoDB');

  // 2) pick one upcoming booking
  const now = new Date();
  const in5 = new Date(now.getTime() + 5 * 24 * 60 * 60 * 1000);
  const booking = await Booking.findOne({
    dateFin: { $gte: now, $lte: in5 },
    status: 'Confirmé',
  }).lean();

  if (!booking) {
    console.error('❌ No upcoming booking found in next 5 days');
    process.exit(1);
  }
  console.log(`🔍 Testing booking ${booking._id} / apt ${booking.apartment}`);

  // 3) clear any existing auto‑missions for that apartment/day
  const dayStart = new Date(booking.dateFin);
  dayStart.setHours(0,0,0,0);
  const dayEnd = new Date(dayStart);
  dayEnd.setDate(dayEnd.getDate() + 1);

  await Mission.deleteMany({
    apartment: booking.apartment,
    'metadata.autoGenerated': true,
    dateDebut: { $gte: dayStart, $lt: dayEnd }
  });
  console.log('🧹 Cleared previous auto‑missions for that day');

  // 4) fire two concurrent runs
  console.log('🚀 Launching two concurrent processUpcomingBookings() calls...');
  const [res1, res2] = await Promise.all([
    processUpcomingBookings(),
    processUpcomingBookings()
  ]);

  console.log('➡️  First run results:', res1);
  console.log('➡️ Second run results:', res2);

  // 5) count how many missions you now have
  const missions = await Mission.find({
    apartment: booking.apartment,
    'metadata.autoGenerated': true,
    dateDebut: { $gte: dayStart, $lt: dayEnd }
  }).lean();

  console.log(`\n📊 Missions for ${booking.apartment} on ${dayStart.toISOString().slice(0,10)}: ${missions.length}`);
  missions.forEach(m => console.log(` - ${m._id} at ${m.dateDebut.toISOString()}`));

  process.exit(0);
}

main().catch(err => {
  console.error(err);
  process.exit(1);
});
